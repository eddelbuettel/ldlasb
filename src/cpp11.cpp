// Generated by cpp11: do not edit by hand
// clang-format off

#include <cpp11/R.hpp>
#include <Rcpp.h>
using namespace Rcpp;
#include "cpp11/declarations.hpp"

// grow.cpp
cpp11::writable::doubles other_grow_(R_xlen_t n);
extern "C" SEXP _ldlasb_other_grow_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(other_grow_(cpp11::as_cpp<cpp11::decay_t<R_xlen_t>>(n)));
  END_CPP11
}
// grow.cpp
std::vector<R_xlen_t> rcpp_grow_(R_xlen_t n);
extern "C" SEXP _ldlasb_rcpp_grow_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(rcpp_grow_(cpp11::as_cpp<cpp11::decay_t<R_xlen_t>>(n)));
  END_CPP11
}
// release.cpp
void other_release_(int n);
extern "C" SEXP _ldlasb_other_release_(SEXP n) {
  BEGIN_CPP11
    other_release_(cpp11::as_cpp<cpp11::decay_t<int>>(n));
    return R_NilValue;
  END_CPP11
}
// release.cpp
void rcpp_release_(int n);
extern "C" SEXP _ldlasb_rcpp_release_(SEXP n) {
  BEGIN_CPP11
    rcpp_release_(cpp11::as_cpp<cpp11::decay_t<int>>(n));
    return R_NilValue;
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_ldlasb_other_grow_",    (DL_FUNC) &_ldlasb_other_grow_,    1},
    {"_ldlasb_other_release_", (DL_FUNC) &_ldlasb_other_release_, 1},
    {"_ldlasb_rcpp_grow_",     (DL_FUNC) &_ldlasb_rcpp_grow_,     1},
    {"_ldlasb_rcpp_release_",  (DL_FUNC) &_ldlasb_rcpp_release_,  1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_ldlasb(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
